{
  "openapi": "3.0.0",
  "info": {
    "title": "Example API with RBAC/ABAC authorization",
    "description": "This is an example API written in Typescript and features authentication and authorization",
    "contact": {
      "name": "API Support",
      "url": "http://www.example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "host": "http://localhost:3000",
  "basePath": "/",
  "schemes": ["http"],
  "produces": ["application/json"],
  "paths": {
    "/register": {
      "post": {
        "tags": ["authentication"],
        "summary": "Creates a new user",
        "requestBody": {
          "description": "User information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New user record with ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/verify/{token}": {
      "get": {
        "tags": ["authentication"],
        "summary": "Activates user and logs them in if valid, redirecting to configured URL",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "JWT token received in email link",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User record and JWT auth token that expires in 1 hour",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "Authenticates user and generates new JWT auth token",
        "requestBody": {
          "description": "User login credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User record and JWT auth token that expires in 1 hour",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/impersonate/{id}": {
      "post": {
        "tags": ["authentication"],
        "summary": "Authenticates as surrogate user and generates new JWT auth token",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to impersonate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User record and JWT auth token that expires in 1 hour",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["authentication"],
        "summary": "Disables user token from subsequent access",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "Success flag"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/lost-password": {
      "post": {
        "tags": ["authentication"],
        "summary": "Emails new magic link to log user in if found",
        "requestBody": {
          "description": "Email address for valid user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation and prompt to check email (TODO)"
          }
        }
      }
    },
    "/tokens/{tokenId}": {
      "delete": {
        "tags": ["authentication"],
        "summary": "Deletes specific token if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of token that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": ["roles"],
        "summary": "Returns list of roles",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "A list of roles (optionally with nested permissions if allowed)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["roles"],
        "summary": "Creates a new role",
        "security": [
          {"bearerAuth": []}
        ],
        "requestBody": {
          "description": "Role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created role with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": ["roles"],
        "summary": "Returns a role if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A copy of the requested role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["roles"],
        "summary": "Updates an existing role if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the updated role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["roles"],
        "summary": "Deletes a role if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/roles/{id}/permissions": {
      "get": {
        "tags": ["roles"],
        "summary": "Returns a list of roles permissions",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role record that needs permissions retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of permissions for the role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["roles"],
        "summary": "Adds a permission for role",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role record that permission will be added",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Permission data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created role with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/roles/{id}/permissions/{permissionId}": {
      "delete": {
        "tags": ["roles"],
        "summary": "Deletes specific role permission if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role that needs permissions deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "ID of permission that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Returns list of users",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "A list of users (optionally with nested roles if allowed)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Creates a new user",
        "security": [
          {"bearerAuth": []}
        ],
        "requestBody": {
          "description": "User data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created user with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Returns a user if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved (optionally with nested roles if allowed)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the requested user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Updates a user if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes user if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": ["users"],
        "summary": "Returns a list of users roles",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user record that needs roles retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles assigned to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Adds a role for user",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user record that needs role added",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAddInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created user with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/roles/{roleId}": {
      "delete": {
        "tags": ["users"],
        "summary": "Deletes specific user role if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs roles deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/tokens": {
      "get": {
        "tags": ["users"],
        "summary": "Returns a list of users tokens",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved (optionally with nested roles if allowed)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A copy of the requested user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes all user tokens",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs tokens deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/tokens/{tokenId}": {
      "delete": {
        "tags": ["users"],
        "summary": "Deletes specific user token if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs tokens deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "ID of token that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/flags": {
      "get": {
        "tags": ["users"],
        "summary": "Returns a list of users flags",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs flags retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of feature flags for that user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFlag"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/segments": {
      "get": {
        "tags": ["segments"],
        "summary": "Returns list of segments",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "A list of segments (optionally with nested permissions if allowed)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Segment"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["segments"],
        "summary": "Creates a new segment",
        "security": [
          {"bearerAuth": []}
        ],
        "requestBody": {
          "description": "Segment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created segment with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/segments/{id}": {
      "get": {
        "tags": ["segments"],
        "summary": "Returns a segment if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A copy of the requested segment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["segments"],
        "summary": "Updates an existing segment if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Segment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the updated segment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["segments"],
        "summary": "Deletes a segment if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/flags": {
      "get": {
        "tags": ["flags"],
        "summary": "Returns list of flags",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "A list of flags (optionally with nested permissions if allowed)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flag"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["flags"],
        "summary": "Creates a new flag",
        "security": [
          {"bearerAuth": []}
        ],
        "requestBody": {
          "description": "Flag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created flag with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flag"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/flags/{id}": {
      "get": {
        "tags": ["flags"],
        "summary": "Returns a flag if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A copy of the requested flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flag"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["flags"],
        "summary": "Updates an existing flag if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Flag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the updated flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flag"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["flags"],
        "summary": "Deletes a flag if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/goals": {
      "get": {
        "tags": ["goals"],
        "summary": "Returns list of goals",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "A list of goals (optionally with nested permissions if allowed)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Goal"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["goals"],
        "summary": "Creates a new goal",
        "security": [
          {"bearerAuth": []}
        ],
        "requestBody": {
          "description": "Goal data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the created goal with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Goal"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/goals/{id}": {
      "get": {
        "tags": ["goals"],
        "summary": "Returns a goal if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A copy of the requested goal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Goal"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["goals"],
        "summary": "Updates an existing goal if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Goal data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A copy of the updated goal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Goal"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["goals"],
        "summary": "Deletes a goal if exists",
        "security": [
          {"bearerAuth": []}
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of record that needs deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of successful operation"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["search"],
        "summary": "Search by places using opencagedata service",
        "security": [
          {"bearerAuth": []}
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "content": {
          "application/json": {}
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Specifies the query string",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/healthz": {
      "get": {
        "tags": ["systems"],
        "summary": "Returns success if app running",
        "responses": {
          "200": {
            "description": "A successful status code to indicate app is running"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "RoleInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RoleAddInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "avatar": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "UserFlag": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "Goal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hits": {
            "type": "number"
          },
          "uniqueUsers": {
            "type": "number"
          },
          "targetHits": {
            "type": "number"
          },
          "targetUniqueUsers": {
            "type": "number"
          },
          "start": {
            "type": "number"
          },
          "stop": {
            "type": "number"
          },
          "enabled": {
            "type": "boolean"
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flag"
            }
          }
        }
      },
      "GoalInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hits": {
            "type": "number"
          },
          "uniqueUsers": {
            "type": "number"
          },
          "targetHits": {
            "type": "number"
          },
          "targetUniqueUsers": {
            "type": "number"
          },
          "start": {
            "type": "number"
          },
          "stop": {
            "type": "number"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Flag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["user", "product"]
          },
          "description": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "story": {
            "type": "string"
          },
          "squad": {
            "type": "string"
          },
          "trackable": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "temporary": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "targetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "object",
            "minimum": 1,
            "properties": {
              "development": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "test": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "staging": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "performance": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "production": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variant"
            }
          },
          "goals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Goal"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment"
            }
          }
        }
      },
      "FlagInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["user", "product"]
          },
          "description": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "story": {
            "type": "string"
          },
          "squad": {
            "type": "string"
          },
          "trackable": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "temporary": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "targetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "object",
            "minimum": 1,
            "properties": {
              "development": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "test": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "staging": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "performance": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "production": {
                "type": "object",
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variant"
            }
          }
        }
      },
      "Segment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flag"
            }
          }
        }
      },
      "SegmentInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "included": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "Variant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "goalIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Rule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["field", "localDate", "localTime"]
          },
          "expression": {
            "type": "string"
          }
        }
      },
      "Environment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "targetEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "segmentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variantIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorModel": {
        "type": "object",
        "required": [
          "message",
          "status"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "minimum": 100,
            "maximum": 600
          }
        }
      }
    },
    "responses": {

    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
